<html>
  <head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});

      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback(drawRatingChart);
      google.charts.setOnLoadCallback(drawRatingTotalChart);
      google.charts.setOnLoadCallback(drawAppCPUChart);
      google.charts.setOnLoadCallback(drawAppMemChart);
      google.charts.setOnLoadCallback(drawDBCPUChart);
      google.charts.setOnLoadCallback(drawLReadsChart);
      google.charts.setOnLoadCallback(drawLWritesChart);
      google.charts.setOnLoadCallback(drawPReadsChart);

      function drawAppCPUChart() {
          {{with .AppCPU}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'CPU (%)'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_app_cpu'));
          chart.draw(data, options);
      }

      function drawAppMemChart() {
          {{with .AppMem}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'Mem (%)'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_app_mem'));
          chart.draw(data, options);
      }

      function drawDBCPUChart() {
          {{with .DBCPU}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'CPU (%)'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_db_cpu'));
          chart.draw(data, options);
      }

      function drawLReadsChart() {
          {{with .LReads}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'Logical Reads'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_db_lreads'));
          chart.draw(data, options);
      }

      function drawLWritesChart() {
          {{with .LWrites}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'Logical Writes'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_db_lwrites'));
          chart.draw(data, options);
      }

      function drawPReadsChart() {
          {{with .PReads}}
          // Create the data table.
          var data = new google.visualization.DataTable();

          {{range .IDs}}
          data.addColumn('number', {{.}});
          {{end}}

          data.addRows([
              {{range .Results}}
              [{{range .}}{{.}},{{end}}],
              {{end}}
          ]);

          // Set chart options
          var options = {'title':{{.Title}},
                         'width':2000,
                         'height':300,
                         'titleTextStyle': {
    					     'color': '#0020C2',
    						 'fontSize': 20,
    						 'bold': true},
    					 'hAxis': {
    				         'title': 'Collection Intervals ({{$.CollectionInterval}})'
    				     },
    					 'vAxis': {
    				         'title': 'Physical Reads'
    				     },
    					 'crosshair': {
    			             'color': '#000',
                             'trigger': 'selection',
                         },
    					 'legend': {'position': 'center'}};

          {{end}}

          // Instantiate and draw our chart, passing in some options.
          var chart = new google.visualization.LineChart(document.getElementById('chart_div_db_preads'));
          chart.draw(data, options);
      }

      function drawRatingChart() {
        {{with .UDRRate}}

        // Create the data table.
        var data = new google.visualization.DataTable();

        {{range .IDs}}
        data.addColumn('number', {{.}});
        {{end}}

        data.addRows([
            {{range .Results}}
            [{{range .}}{{.}},{{end}}],
            {{end}}
        ]);

        // Set chart options
        var options = {'title':{{.Title}},
                       'width':2000,
                       'height':300,
                       'titleTextStyle': {
                           'color': '#0020C2',
                           'fontSize': 20,
                           'bold': true},
                       'hAxis': {
                           'title': 'Collection Intervals ({{$.CollectionInterval}})'
                       },
                       'vAxis': {
                           'title': 'UDRs/sec'
                       },
                       'crosshair': {
                           'color': '#000',
                           'trigger': 'selection',
                       },
                       'legend': {'position': 'center'}};

        {{end}}

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.LineChart(document.getElementById('chart_div_udr'));
        chart.draw(data, options);
      }

      function drawRatingTotalChart() {
        {{with .UDRAbsolute}}

        // Create the data table.
        var data = new google.visualization.DataTable();

        {{range .IDs}}
        data.addColumn('number', {{.}});
        {{end}}

        data.addRows([
            {{range .Results}}
            [{{range .}}{{.}},{{end}}],
            {{end}}
        ]);

        // Set chart options
        var options = {'title':{{.Title}},
                       'width':2000,
                       'height':300,
                       'titleTextStyle': {
                           'color': '#0020C2',
                           'fontSize': 20,
                           'bold': true},
                       'hAxis': {
                           'title': 'Collection Intervals ({{$.CollectionInterval}})'
                       },
                       'vAxis': {
                           'title': 'UDRs'
                       },
                       'crosshair': {
                           'color': '#000',
                           'trigger': 'selection',
                       },
                       'legend': {'position': 'center'}};

        {{end}}

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.LineChart(document.getElementById('chart_div_udr_total'));
        chart.draw(data, options);
      }
    </script>
  </head>

  <body>
    <div id="chart_div_udr"></div>
    <div id="chart_div_udr_total"></div>
    <div id="chart_div_app_cpu"></div>
    <div id="chart_div_app_mem"></div>
    <div id="chart_div_db_cpu"></div>
    <div id="chart_div_db_lreads"></div>
    <div id="chart_div_db_lwrites"></div>
    <div id="chart_div_db_preads"></div>
  </body>
</html>
